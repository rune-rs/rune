name: CI

on:
  pull_request: {}
  push:
    branches:
      - main
  schedule:
    - cron: '48 17 * * 6'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  rustfmt:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt
    - run: cargo fmt --all -- --check

  runefmt:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
    - run: cargo run --bin rune -- fmt --verbose --check
    - run: cargo run --bin rune -- fmt --verbose --check --recursive scripts

  clippy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy
    - uses: Swatinem/rust-cache@v2
    - run: cargo clippy --all-features --all-targets -- -D warnings

  docs:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@nightly
    - uses: Swatinem/rust-cache@v2
    - run: cargo doc -p rune --all-features
      env:
        RUSTFLAGS: --cfg rune_docsrs
        RUSTDOCFLAGS: --cfg rune_docsrs

  basics:
    runs-on: ubuntu-latest
    needs:
    - rustfmt
    - clippy
    - docs
    steps:
    - run: exit 0

  msrv:
    runs-on: ubuntu-latest
    needs: basics
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@1.81
    - uses: Swatinem/rust-cache@v2
    - run: cargo build

  miri:
    runs-on: ubuntu-latest
    needs: basics
    strategy:
      fail-fast: false
      matrix:
        include:
          - crate: rune
            target: "runtime:: hir::arena:: --skip runtime::vm:: --skip runtime::vm_execution::"
          - crate: rune-alloc
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@nightly
      with:
        components: miri
    - uses: Swatinem/rust-cache@v2
    - run: cargo miri test -p ${{matrix.crate}} --all-features -- ${{matrix.target}}

  nightly:
    runs-on: ubuntu-latest
    needs: basics
    env:
      RUSTFLAGS: -D warnings --cfg rune_nightly
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@nightly
      with:
        components: miri
    - uses: Swatinem/rust-cache@v2
    - run: cargo build --all-features
    - run: cargo build --tests --all-features

  no_default_features:
    runs-on: ubuntu-latest
    needs: basics
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
    - uses: Swatinem/rust-cache@v2
    - run: cargo build -p rune --no-default-features --features alloc

  build_feature:
    runs-on: ubuntu-latest
    needs: basics
    strategy:
      fail-fast: false
      matrix:
        feature: [cli, "cli,doc", "cli,fmt", doc, workspace, languageserver, byte-code, capture-io, emit]
    env:
      RUSTFLAGS: -D warnings
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
    - uses: Swatinem/rust-cache@v2
    - run: cargo build -p rune --no-default-features --features ${{matrix.feature}}
    - run: cargo check --release -p rune --no-default-features --features ${{matrix.feature}}

  wasm:
    runs-on: ubuntu-latest
    needs: basics
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
      with:
        targets: wasm32-unknown-unknown
    - uses: Swatinem/rust-cache@v2
    - run: cargo build -p rune-wasm --target wasm32-unknown-unknown

  no_std:
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        example: [minimal]
    needs: basics
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@nightly
    - uses: Swatinem/rust-cache@v2
    - run: cargo run --manifest-path=no-std/Cargo.toml --example ${{matrix.example}}

  test:
    runs-on: ubuntu-latest
    needs: [no_default_features, build_feature, docs, msrv, miri, no_std, wasm]
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
    - uses: Swatinem/rust-cache@v2
    - run: cargo build -p rune --no-default-features --features alloc
    - run: cargo test --all-targets
    - run: cargo test --doc
    - run: cargo run --bin rune -- check --recursive scripts
    - run: cargo run --bin rune -- check --all-targets
    - run: cargo run --bin rune -- test --all-targets -O test-std=true
