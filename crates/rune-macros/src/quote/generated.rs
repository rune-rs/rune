use crate::quote;

/// This file has been generated from `assets\tokens.yaml`
/// DO NOT modify by hand!

pub(crate) fn kind_from_ident(ident: &str) -> Option<quote::Kind> {
    match ident {
        "abstract" => Some(quote::Kind::new("Abstract")),
        "alignof" => Some(quote::Kind::new("AlignOf")),
        "as" => Some(quote::Kind::new("As")),
        "async" => Some(quote::Kind::new("Async")),
        "await" => Some(quote::Kind::new("Await")),
        "become" => Some(quote::Kind::new("Become")),
        "break" => Some(quote::Kind::new("Break")),
        "const" => Some(quote::Kind::new("Const")),
        "crate" => Some(quote::Kind::new("Crate")),
        "default" => Some(quote::Kind::new("Default")),
        "do" => Some(quote::Kind::new("Do")),
        "else" => Some(quote::Kind::new("Else")),
        "enum" => Some(quote::Kind::new("Enum")),
        "extern" => Some(quote::Kind::new("Extern")),
        "false" => Some(quote::Kind::new("False")),
        "final" => Some(quote::Kind::new("Final")),
        "fn" => Some(quote::Kind::new("Fn")),
        "for" => Some(quote::Kind::new("For")),
        "if" => Some(quote::Kind::new("If")),
        "impl" => Some(quote::Kind::new("Impl")),
        "in" => Some(quote::Kind::new("In")),
        "is" => Some(quote::Kind::new("Is")),
        "let" => Some(quote::Kind::new("Let")),
        "loop" => Some(quote::Kind::new("Loop")),
        "macro" => Some(quote::Kind::new("Macro")),
        "match" => Some(quote::Kind::new("Match")),
        "mod" => Some(quote::Kind::new("Mod")),
        "move" => Some(quote::Kind::new("Move")),
        "not" => Some(quote::Kind::new("Not")),
        "offsetof" => Some(quote::Kind::new("OffsetOf")),
        "override" => Some(quote::Kind::new("Override")),
        "priv" => Some(quote::Kind::new("Priv")),
        "proc" => Some(quote::Kind::new("Proc")),
        "pub" => Some(quote::Kind::new("Pub")),
        "pure" => Some(quote::Kind::new("Pure")),
        "ref" => Some(quote::Kind::new("Ref")),
        "return" => Some(quote::Kind::new("Return")),
        "select" => Some(quote::Kind::new("Select")),
        "Self" => Some(quote::Kind::new("SelfType")),
        "self" => Some(quote::Kind::new("SelfValue")),
        "sizeof" => Some(quote::Kind::new("SizeOf")),
        "static" => Some(quote::Kind::new("Static")),
        "struct" => Some(quote::Kind::new("Struct")),
        "super" => Some(quote::Kind::new("Super")),
        "template" => Some(quote::Kind::new("Template")),
        "true" => Some(quote::Kind::new("True")),
        "typeof" => Some(quote::Kind::new("TypeOf")),
        "unsafe" => Some(quote::Kind::new("Unsafe")),
        "use" => Some(quote::Kind::new("Use")),
        "virtual" => Some(quote::Kind::new("Virtual")),
        "while" => Some(quote::Kind::new("While")),
        "yield" => Some(quote::Kind::new("Yield")),
        _ => None,
    }
}

pub(crate) fn kind_from_punct(buf: &[char]) -> Option<quote::Kind> {
    match buf {
        ['&', '\u{0}', '\u{0}'] => Some(quote::Kind::new("Amp")),
        ['&', '&', '\u{0}'] => Some(quote::Kind::new("AmpAmp")),
        ['&', '=', '\u{0}'] => Some(quote::Kind::new("AmpEq")),
        ['-', '>', '\u{0}'] => Some(quote::Kind::new("Arrow")),
        ['@', '\u{0}', '\u{0}'] => Some(quote::Kind::new("At")),
        ['!', '\u{0}', '\u{0}'] => Some(quote::Kind::new("Bang")),
        ['!', '=', '\u{0}'] => Some(quote::Kind::new("BangEq")),
        ['^', '\u{0}', '\u{0}'] => Some(quote::Kind::new("Caret")),
        ['^', '=', '\u{0}'] => Some(quote::Kind::new("CaretEq")),
        [':', '\u{0}', '\u{0}'] => Some(quote::Kind::new("Colon")),
        [':', ':', '\u{0}'] => Some(quote::Kind::new("ColonColon")),
        [',', '\u{0}', '\u{0}'] => Some(quote::Kind::new("Comma")),
        ['-', '\u{0}', '\u{0}'] => Some(quote::Kind::new("Dash")),
        ['-', '=', '\u{0}'] => Some(quote::Kind::new("DashEq")),
        ['/', '\u{0}', '\u{0}'] => Some(quote::Kind::new("Div")),
        ['$', '\u{0}', '\u{0}'] => Some(quote::Kind::new("Dollar")),
        ['.', '\u{0}', '\u{0}'] => Some(quote::Kind::new("Dot")),
        ['.', '.', '\u{0}'] => Some(quote::Kind::new("DotDot")),
        ['=', '\u{0}', '\u{0}'] => Some(quote::Kind::new("Eq")),
        ['=', '=', '\u{0}'] => Some(quote::Kind::new("EqEq")),
        ['>', '\u{0}', '\u{0}'] => Some(quote::Kind::new("Gt")),
        ['>', '=', '\u{0}'] => Some(quote::Kind::new("GtEq")),
        ['>', '>', '\u{0}'] => Some(quote::Kind::new("GtGt")),
        ['>', '>', '='] => Some(quote::Kind::new("GtGtEq")),
        ['<', '\u{0}', '\u{0}'] => Some(quote::Kind::new("Lt")),
        ['<', '=', '\u{0}'] => Some(quote::Kind::new("LtEq")),
        ['<', '<', '\u{0}'] => Some(quote::Kind::new("LtLt")),
        ['<', '<', '='] => Some(quote::Kind::new("LtLtEq")),
        ['%', '\u{0}', '\u{0}'] => Some(quote::Kind::new("Perc")),
        ['%', '=', '\u{0}'] => Some(quote::Kind::new("PercEq")),
        ['|', '\u{0}', '\u{0}'] => Some(quote::Kind::new("Pipe")),
        ['|', '=', '\u{0}'] => Some(quote::Kind::new("PipeEq")),
        ['|', '|', '\u{0}'] => Some(quote::Kind::new("PipePipe")),
        ['+', '\u{0}', '\u{0}'] => Some(quote::Kind::new("Plus")),
        ['+', '=', '\u{0}'] => Some(quote::Kind::new("PlusEq")),
        ['#', '\u{0}', '\u{0}'] => Some(quote::Kind::new("Pound")),
        ['?', '\u{0}', '\u{0}'] => Some(quote::Kind::new("QuestionMark")),
        ['=', '>', '\u{0}'] => Some(quote::Kind::new("Rocket")),
        [';', '\u{0}', '\u{0}'] => Some(quote::Kind::new("SemiColon")),
        ['/', '=', '\u{0}'] => Some(quote::Kind::new("SlashEq")),
        ['*', '\u{0}', '\u{0}'] => Some(quote::Kind::new("Star")),
        ['*', '=', '\u{0}'] => Some(quote::Kind::new("StarEq")),
        ['~', '\u{0}', '\u{0}'] => Some(quote::Kind::new("Tilde")),
        ['_', '\u{0}', '\u{0}'] => Some(quote::Kind::new("Underscore")),
        _ => None,
    }
}
