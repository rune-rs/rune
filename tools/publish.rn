use process::Command;

pub async fn main() {
    let ctrl_c = signal::ctrl_c();

    let cargo_toml = fs::read_to_string("Cargo.toml").await?;
    let cargo_toml = toml::from_string(cargo_toml)?;
    let projects = cargo_toml.workspace.members;

    for project in projects {
        if !project.starts_with("crates") {
            continue;
        }

        let cargo_toml = fs::read_to_string(`${project}/Cargo.toml`).await?;
        let cargo_toml = toml::from_string(cargo_toml)?;

        if !cargo_toml.package.get("publish").unwrap_or(true) {
            continue;
        }

        let cargo = Command::new("cargo");
        cargo.args(["publish", "--manifest-path", `${project}/Cargo.toml`, "--no-verify"]);

        let status = select {
            _ = ctrl_c => break,
            output = cargo.spawn()?.wait_with_output() => output?.status,
        };

        println(`${project}: ${status}`);
    }

    println("Bye");
}
